# Generated by Django 4.2.7 on 2025-06-09 08:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExamBoard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('acronym', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='exam_boards/')),
                ('total_questions', models.PositiveIntegerField(default=0)),
                ('difficulty_average', models.FloatField(default=3.0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Banca Examinadora',
                'verbose_name_plural': 'Bancas Examinadoras',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('statement', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Múltipla Escolha'), ('true_false', 'Verdadeiro ou Falso'), ('fill_blank', 'Preencher Lacunas'), ('order_items', 'Ordenar Itens'), ('match_pairs', 'Associar Pares'), ('essay', 'Dissertativa')], max_length=20)),
                ('difficulty_level', models.IntegerField(choices=[(1, 'Muito Fácil'), (2, 'Fácil'), (3, 'Médio'), (4, 'Difícil'), (5, 'Muito Difícil')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('exam_name', models.CharField(max_length=200)),
                ('exam_year', models.PositiveIntegerField()),
                ('exam_date', models.DateField(blank=True, null=True)),
                ('source_url', models.URLField(blank=True)),
                ('legal_references', models.JSONField(default=list)),
                ('related_jurisprudence', models.TextField(blank=True)),
                ('doctrine_explanation', models.TextField(blank=True)),
                ('tags', models.JSONField(default=list)),
                ('estimated_time_seconds', models.PositiveIntegerField(default=60)),
                ('times_answered', models.PositiveIntegerField(default=0)),
                ('correct_answers', models.PositiveIntegerField(default=0)),
                ('average_time', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('reviewed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam_board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='questions.examboard')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.subject')),
                ('topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.topic')),
            ],
            options={
                'verbose_name': 'Questão',
                'verbose_name_plural': 'Questões',
                'ordering': ['-exam_year', 'exam_name'],
            },
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('letter', models.CharField(max_length=1)),
                ('text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('explanation', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='questions.question')),
            ],
            options={
                'verbose_name': 'Alternativa',
                'verbose_name_plural': 'Alternativas',
                'ordering': ['order', 'letter'],
                'unique_together': {('question', 'letter')},
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('quiz_type', models.CharField(choices=[('lesson_quiz', 'Quiz da Lição'), ('topic_review', 'Revisão do Tópico'), ('subject_test', 'Teste da Disciplina'), ('mock_exam', 'Simulado Completo'), ('custom_quiz', 'Quiz Personalizado'), ('adaptive_quiz', 'Quiz Adaptativo (IA)')], max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Rascunho'), ('published', 'Publicado'), ('archived', 'Arquivado')], default='draft', max_length=20)),
                ('time_limit_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('max_questions', models.PositiveIntegerField(default=20)),
                ('difficulty_level', models.IntegerField(blank=True, choices=[(1, 'Muito Fácil'), (2, 'Fácil'), (3, 'Médio'), (4, 'Difícil'), (5, 'Muito Difícil')], null=True)),
                ('min_year', models.PositiveIntegerField(blank=True, null=True)),
                ('max_year', models.PositiveIntegerField(blank=True, null=True)),
                ('xp_reward', models.PositiveIntegerField(default=50)),
                ('coin_reward', models.PositiveIntegerField(default=20)),
                ('is_premium', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('total_attempts', models.PositiveIntegerField(default=0)),
                ('average_score', models.FloatField(default=0.0)),
                ('average_time', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_quizzes', to=settings.AUTH_USER_MODEL)),
                ('exam_board', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='questions.examboard')),
                ('subjects', models.ManyToManyField(related_name='quizzes', to='courses.subject')),
            ],
            options={
                'verbose_name': 'Quiz/Simulado',
                'verbose_name_plural': 'Quizzes/Simulados',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuestionExplanation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('general_explanation', models.TextField()),
                ('options_explanation', models.JSONField(default=dict)),
                ('legal_articles', models.JSONField(default=list)),
                ('jurisprudence_references', models.TextField(blank=True)),
                ('doctrine_citations', models.TextField(blank=True)),
                ('solution_tips', models.TextField(blank=True)),
                ('common_mistakes', models.TextField(blank=True)),
                ('ai_generated', models.BooleanField(default=False)),
                ('ai_confidence', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='explanation', to='questions.question')),
            ],
            options={
                'verbose_name': 'Explicação da Questão',
                'verbose_name_plural': 'Explicações das Questões',
            },
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_answer', models.TextField(blank=True)),
                ('is_correct', models.BooleanField()),
                ('score', models.FloatField(default=0.0)),
                ('time_spent', models.PositiveIntegerField()),
                ('attempts', models.PositiveIntegerField(default=1)),
                ('ai_feedback', models.TextField(blank=True)),
                ('feedback_requested', models.BooleanField(default=False)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('answered_in_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.lesson')),
                ('answered_in_quiz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='questions.quiz')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='questions.question')),
                ('selected_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='questions.questionoption')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Resposta do Usuário',
                'verbose_name_plural': 'Respostas dos Usuários',
                'ordering': ['-answered_at'],
                'indexes': [models.Index(fields=['user', 'is_correct'], name='questions_u_user_id_f1a978_idx'), models.Index(fields=['question', 'answered_at'], name='questions_u_questio_acbe20_idx')],
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('in_progress', 'Em Andamento'), ('completed', 'Concluído'), ('abandoned', 'Abandonado'), ('time_expired', 'Tempo Expirado')], default='in_progress', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('time_spent', models.PositiveIntegerField(default=0)),
                ('total_questions', models.PositiveIntegerField(default=0)),
                ('correct_answers', models.PositiveIntegerField(default=0)),
                ('score', models.FloatField(default=0.0)),
                ('xp_earned', models.PositiveIntegerField(default=0)),
                ('coins_earned', models.PositiveIntegerField(default=0)),
                ('subject_scores', models.JSONField(default=dict)),
                ('difficulty_breakdown', models.JSONField(default=dict)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='questions.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tentativa de Quiz',
                'verbose_name_plural': 'Tentativas de Quizzes',
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['user', 'status'], name='questions_q_user_id_7266df_idx'), models.Index(fields=['quiz', 'completed_at'], name='questions_q_quiz_id_1ce9ec_idx')],
            },
        ),
        migrations.CreateModel(
            name='QuestionReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('incorrect_answer', 'Gabarito Incorreto'), ('outdated_law', 'Lei Desatualizada'), ('typo', 'Erro de Digitação'), ('unclear_statement', 'Enunciado Confuso'), ('duplicate', 'Questão Duplicada'), ('inappropriate', 'Conteúdo Inapropriado'), ('other', 'Outro')], max_length=20)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('reviewing', 'Em Análise'), ('resolved', 'Resolvido'), ('rejected', 'Rejeitado')], default='pending', max_length=20)),
                ('resolution_notes', models.TextField(blank=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='questions.question')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_reports', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Denúncia de Questão',
                'verbose_name_plural': 'Denúncias de Questões',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'question', 'report_type')},
            },
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['subject', 'difficulty_level'], name='questions_q_subject_52c96b_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['exam_board', 'exam_year'], name='questions_q_exam_bo_fe64d3_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['question_type', 'is_active'], name='questions_q_questio_1d9981_idx'),
        ),
    ]
