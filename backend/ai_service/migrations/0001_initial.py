# Generated by Django 4.2.7 on 2025-06-09 08:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('questions', '0001_initial'),
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdaptiveLearningSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_type', models.CharField(choices=[('practice', 'Prática'), ('review', 'Revisão'), ('challenge', 'Desafio'), ('remedial', 'Reforço'), ('assessment', 'Avaliação')], max_length=20)),
                ('target_difficulty', models.FloatField()),
                ('content_selection_algorithm', models.CharField(default='adaptive_difficulty', max_length=50)),
                ('question_ordering_algorithm', models.CharField(default='spaced_repetition', max_length=50)),
                ('initial_difficulty', models.FloatField()),
                ('difficulty_adjustment_rate', models.FloatField(default=0.1)),
                ('performance_threshold', models.FloatField(default=0.7)),
                ('questions_attempted', models.PositiveIntegerField(default=0)),
                ('questions_correct', models.PositiveIntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('final_difficulty', models.FloatField(blank=True, null=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('performance_analysis', models.JSONField(default=dict)),
                ('recommendations', models.JSONField(default=list)),
                ('next_session_suggestions', models.JSONField(default=dict)),
                ('target_subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adaptive_sessions', to='courses.subject')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adaptive_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sessão de Aprendizado Adaptativo',
                'verbose_name_plural': 'Sessões de Aprendizado Adaptativo',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('model_type', models.CharField(choices=[('explanation', 'Explicação de Questões'), ('feedback', 'Feedback Personalizado'), ('content_generation', 'Geração de Conteúdo'), ('adaptive_learning', 'Aprendizado Adaptativo'), ('content_validation', 'Validação de Conteúdo'), ('question_difficulty', 'Classificação de Dificuldade')], max_length=30)),
                ('provider', models.CharField(choices=[('openai', 'OpenAI'), ('anthropic', 'Anthropic'), ('google', 'Google AI'), ('local', 'Modelo Local')], max_length=20)),
                ('model_name', models.CharField(max_length=100)),
                ('api_endpoint', models.URLField(blank=True)),
                ('max_tokens', models.PositiveIntegerField(default=1000)),
                ('temperature', models.FloatField(default=0.7)),
                ('system_prompt', models.TextField()),
                ('cost_per_token', models.DecimalField(decimal_places=8, default=0, max_digits=10)),
                ('rate_limit_per_minute', models.PositiveIntegerField(default=60)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('total_requests', models.PositiveIntegerField(default=0)),
                ('total_tokens_used', models.BigIntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Modelo de IA',
                'verbose_name_plural': 'Modelos de IA',
                'ordering': ['model_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LearningProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('learning_style', models.CharField(choices=[('visual', 'Visual'), ('auditory', 'Auditivo'), ('kinesthetic', 'Cinestésico'), ('reading', 'Leitura/Escrita'), ('mixed', 'Misto')], default='adaptive', max_length=20)),
                ('difficulty_preference', models.CharField(choices=[('gradual', 'Progressão Gradual'), ('challenge', 'Desafio Constante'), ('adaptive', 'Adaptativo'), ('review_heavy', 'Foco em Revisão')], default='adaptive', max_length=20)),
                ('optimal_session_length', models.PositiveIntegerField(default=30)),
                ('preferred_study_times', models.JSONField(default=list)),
                ('break_frequency', models.PositiveIntegerField(default=15)),
                ('subject_strengths', models.JSONField(default=dict)),
                ('subject_weaknesses', models.JSONField(default=dict)),
                ('question_type_performance', models.JSONField(default=dict)),
                ('common_mistakes', models.JSONField(default=list)),
                ('error_patterns', models.JSONField(default=dict)),
                ('improvement_areas', models.JSONField(default=list)),
                ('motivation_triggers', models.JSONField(default=list)),
                ('preferred_rewards', models.JSONField(default=list)),
                ('engagement_patterns', models.JSONField(default=dict)),
                ('content_complexity_level', models.FloatField(default=3.0)),
                ('explanation_detail_level', models.FloatField(default=3.0)),
                ('example_preference', models.CharField(choices=[('theoretical', 'Teórico'), ('practical', 'Prático'), ('mixed', 'Misto')], default='mixed', max_length=20)),
                ('last_analysis', models.DateTimeField(blank=True, null=True)),
                ('analysis_frequency_days', models.PositiveIntegerField(default=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='learning_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil de Aprendizado',
                'verbose_name_plural': 'Perfis de Aprendizado',
            },
        ),
        migrations.CreateModel(
            name='ContentValidation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('validation_type', models.CharField(choices=[('legal_accuracy', 'Precisão Legal'), ('content_freshness', 'Atualidade do Conteúdo'), ('difficulty_assessment', 'Avaliação de Dificuldade'), ('quality_check', 'Verificação de Qualidade'), ('plagiarism_check', 'Verificação de Plágio')], max_length=30)),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('validated', 'Validado'), ('flagged', 'Sinalizado'), ('outdated', 'Desatualizado'), ('error', 'Erro na Validação')], default='pending', max_length=20)),
                ('confidence_score', models.FloatField(default=0.0)),
                ('validation_details', models.JSONField(default=dict)),
                ('issues_found', models.JSONField(default=list)),
                ('suggestions', models.JSONField(default=list)),
                ('validated_at', models.DateTimeField(auto_now_add=True)),
                ('content_last_modified', models.DateTimeField()),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_service.aimodel')),
                ('legal_content', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='validations', to='courses.legalcontent')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='validations', to='courses.lesson')),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='validations', to='questions.question')),
            ],
            options={
                'verbose_name': 'Validação de Conteúdo',
                'verbose_name_plural': 'Validações de Conteúdo',
                'ordering': ['-validated_at'],
            },
        ),
        migrations.CreateModel(
            name='UserStudyRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('next_lesson', 'Próxima Lição'), ('review_session', 'Sessão de Revisão'), ('practice_quiz', 'Quiz de Prática'), ('weak_area_focus', 'Foco em Área Fraca'), ('difficulty_adjustment', 'Ajuste de Dificuldade'), ('study_schedule', 'Cronograma de Estudos')], max_length=30)),
                ('priority', models.CharField(choices=[('low', 'Baixa'), ('medium', 'Média'), ('high', 'Alta'), ('urgent', 'Urgente')], default='medium', max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('reasoning', models.TextField()),
                ('recommended_content', models.JSONField(default=dict)),
                ('estimated_time_minutes', models.PositiveIntegerField(default=30)),
                ('optimal_timing', models.JSONField(default=dict)),
                ('based_on_performance', models.JSONField(default=dict)),
                ('learning_profile_factors', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('was_followed', models.BooleanField(blank=True, null=True)),
                ('user_feedback', models.TextField(blank=True)),
                ('effectiveness_score', models.FloatField(blank=True, null=True)),
                ('confidence_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('followed_at', models.DateTimeField(blank=True, null=True)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_service.aimodel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recomendação de Estudo',
                'verbose_name_plural': 'Recomendações de Estudo',
                'ordering': ['-priority', '-created_at'],
                'indexes': [models.Index(fields=['user', 'is_active'], name='ai_service__user_id_de0123_idx'), models.Index(fields=['priority', 'created_at'], name='ai_service__priorit_59bd21_idx')],
            },
        ),
        migrations.CreateModel(
            name='AIRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('request_type', models.CharField(choices=[('explanation', 'Explicação de Questão'), ('feedback', 'Feedback de Resposta'), ('content_generation', 'Geração de Conteúdo'), ('adaptive_quiz', 'Quiz Adaptativo'), ('study_suggestion', 'Sugestão de Estudo'), ('legal_update', 'Atualização Legal')], max_length=30)),
                ('context', models.JSONField(default=dict)),
                ('input_text', models.TextField()),
                ('output_text', models.TextField(blank=True)),
                ('tokens_used', models.PositiveIntegerField(default=0)),
                ('response_time_ms', models.PositiveIntegerField(default=0)),
                ('cost', models.DecimalField(decimal_places=6, default=0, max_digits=8)),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('processing', 'Processando'), ('completed', 'Concluído'), ('failed', 'Falhou'), ('rate_limited', 'Limite de Taxa')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('quality_score', models.FloatField(blank=True, null=True)),
                ('user_feedback', models.TextField(blank=True)),
                ('is_helpful', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='ai_service.aimodel')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Requisição de IA',
                'verbose_name_plural': 'Requisições de IA',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'request_type'], name='ai_service__user_id_51cb39_idx'), models.Index(fields=['model', 'status'], name='ai_service__model_i_4dc31f_idx'), models.Index(fields=['created_at'], name='ai_service__created_f8cd89_idx')],
            },
        ),
        migrations.CreateModel(
            name='AIFeedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('feedback_type', models.CharField(choices=[('answer_explanation', 'Explicação de Resposta'), ('study_suggestion', 'Sugestão de Estudo'), ('performance_analysis', 'Análise de Performance'), ('motivation', 'Motivacional'), ('correction', 'Correção'), ('encouragement', 'Encorajamento')], max_length=30)),
                ('context', models.CharField(choices=[('question_wrong', 'Resposta Incorreta'), ('question_correct', 'Resposta Correta'), ('session_complete', 'Sessão Concluída'), ('streak_broken', 'Streak Quebrado'), ('achievement_unlocked', 'Conquista Desbloqueada'), ('difficulty_adjustment', 'Ajuste de Dificuldade')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('additional_resources', models.JSONField(default=list)),
                ('user_learning_style', models.CharField(blank=True, max_length=20)),
                ('difficulty_level', models.FloatField(default=3.0)),
                ('tone', models.CharField(choices=[('formal', 'Formal'), ('casual', 'Casual'), ('encouraging', 'Encorajador'), ('direct', 'Direto')], default='encouraging', max_length=20)),
                ('ai_confidence', models.FloatField(default=0.0)),
                ('user_rating', models.PositiveIntegerField(blank=True, null=True)),
                ('was_helpful', models.BooleanField(blank=True, null=True)),
                ('user_feedback_text', models.TextField(blank=True)),
                ('generation_time_ms', models.PositiveIntegerField(default=0)),
                ('tokens_used', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ai_model_used', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_service.aimodel')),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='questions.question')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ai_service.adaptivelearningsession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_feedback', to=settings.AUTH_USER_MODEL)),
                ('user_answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='questions.useranswer')),
            ],
            options={
                'verbose_name': 'Feedback de IA',
                'verbose_name_plural': 'Feedbacks de IA',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'feedback_type'], name='ai_service__user_id_f4ffdd_idx'), models.Index(fields=['context', 'created_at'], name='ai_service__context_226f2a_idx')],
            },
        ),
    ]
