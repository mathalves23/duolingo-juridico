version: '3.8'

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - web1
      - web2
    restart: unless-stopped
    networks:
      - web_net

  # Django Application (Multiple instances)
  web1:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.prod
    expose:
      - "8000"
    env_file:
      - .env.prod
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - db_master
      - redis
      - elasticsearch
    restart: unless-stopped
    networks:
      - web_net
      - db_net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  web2:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.prod
    expose:
      - "8000"
    env_file:
      - .env.prod
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - db_master
      - redis
      - elasticsearch
    restart: unless-stopped
    networks:
      - web_net
      - db_net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL Master-Slave Setup
  db_master:
    image: postgres:15
    environment:
      POSTGRES_DB: duolingo_juridico
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgresql/pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - db_net
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  db_slave:
    image: postgres:15
    environment:
      POSTGRES_DB: duolingo_juridico
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGUSER: ${DB_USER}
      POSTGRES_MASTER_SERVICE: db_master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD}
    volumes:
      - postgres_slave_data:/var/lib/postgresql/data
      - ./postgresql/recovery.conf:/var/lib/postgresql/data/recovery.conf
    ports:
      - "5433:5432"
    depends_on:
      - db_master
    restart: unless-stopped
    networks:
      - db_net
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Redis Cluster
  redis_master:
    image: redis:7-alpine
    command: redis-server --appendonly yes --replica-announce-ip redis_master
    volumes:
      - redis_master_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - web_net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  redis_slave:
    image: redis:7-alpine
    command: redis-server --appendonly yes --replicaof redis_master 6379
    volumes:
      - redis_slave_data:/data
    depends_on:
      - redis_master
    restart: unless-stopped
    networks:
      - web_net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - web_net

  # Celery Workers
  celery_worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.prod
    command: celery -A config worker -l info -Q default --concurrency=4
    env_file:
      - .env.prod
    volumes:
      - media_volume:/app/media
    depends_on:
      - db_master
      - redis
    restart: unless-stopped
    networks:
      - web_net
      - db_net
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  celery_beat:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.prod
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env.prod
    depends_on:
      - db_master
      - redis
    restart: unless-stopped
    networks:
      - web_net
      - db_net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Celery Flower (Monitoring)
  celery_flower:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.prod
    command: celery -A config flower --port=5555
    env_file:
      - .env.prod
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - web_net

  # Elasticsearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - web_net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Kibana for Elasticsearch monitoring
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - web_net

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - web_net

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - web_net

  # Node Exporter for system metrics
  node_exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks:
      - web_net

  # Backup Service
  backup:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.backup
    env_file:
      - .env.prod
    volumes:
      - backup_data:/backups
      - postgres_master_data:/db_data:ro
      - media_volume:/app_media:ro
    depends_on:
      - db_master
    restart: unless-stopped
    networks:
      - db_net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Log Management with ELK Stack
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logging/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - web_net

  # Filebeat for log shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    volumes:
      - ./logging/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - logstash
    restart: unless-stopped
    networks:
      - web_net

  # Security Scanner
  security_scanner:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.security
    env_file:
      - .env.prod
    volumes:
      - ./security/reports:/reports
    depends_on:
      - web1
    restart: "no"
    networks:
      - web_net

volumes:
  postgres_master_data:
  postgres_slave_data:
  redis_master_data:
  redis_slave_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  backup_data:
  static_volume:
  media_volume:

networks:
  web_net:
    driver: bridge
  db_net:
    driver: bridge
    internal: true 