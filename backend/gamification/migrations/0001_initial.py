# Generated by Django 4.2.7 on 2025-06-09 08:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('streak', 'Streak'), ('xp', 'Experiência'), ('lessons', 'Lições'), ('quiz', 'Quizzes'), ('accuracy', 'Precisão'), ('speed', 'Velocidade'), ('special', 'Especial'), ('social', 'Social')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Comum'), ('rare', 'Raro'), ('epic', 'Épico'), ('legendary', 'Lendário'), ('mythic', 'Mítico')], default='common', max_length=20)),
                ('requirements', models.JSONField(default=dict)),
                ('xp_reward', models.PositiveIntegerField(default=0)),
                ('coin_reward', models.PositiveIntegerField(default=0)),
                ('gem_reward', models.PositiveIntegerField(default=0)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='achievements/icons/')),
                ('badge_color', models.CharField(default='#FFD700', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('is_secret', models.BooleanField(default=False)),
                ('unlock_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Conquista',
                'verbose_name_plural': 'Conquistas',
                'ordering': ['achievement_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DailyChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('lessons', 'Completar Lições'), ('quiz', 'Fazer Quiz'), ('streak', 'Manter Streak'), ('accuracy', 'Precisão Mínima'), ('time_limit', 'Limite de Tempo'), ('subject_focus', 'Foco em Disciplina')], max_length=20)),
                ('requirements', models.JSONField(default=dict)),
                ('xp_reward', models.PositiveIntegerField(default=25)),
                ('coin_reward', models.PositiveIntegerField(default=10)),
                ('gem_reward', models.PositiveIntegerField(default=0)),
                ('date', models.DateField(unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('completion_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Desafio Diário',
                'verbose_name_plural': 'Desafios Diários',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('leaderboard_type', models.CharField(choices=[('global_xp', 'XP Global'), ('weekly_xp', 'XP Semanal'), ('monthly_xp', 'XP Mensal'), ('streak', 'Streak Atual'), ('lessons', 'Lições Completadas'), ('quiz_accuracy', 'Precisão em Quizzes'), ('subject_specific', 'Específico por Disciplina')], max_length=20)),
                ('period', models.CharField(choices=[('daily', 'Diário'), ('weekly', 'Semanal'), ('monthly', 'Mensal'), ('yearly', 'Anual'), ('all_time', 'Todos os Tempos')], max_length=20)),
                ('max_entries', models.PositiveIntegerField(default=100)),
                ('is_active', models.BooleanField(default=True)),
                ('current_period_start', models.DateTimeField()),
                ('current_period_end', models.DateTimeField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('subject_filter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.subject')),
            ],
            options={
                'verbose_name': 'Ranking',
                'verbose_name_plural': 'Rankings',
                'ordering': ['leaderboard_type', 'period'],
            },
        ),
        migrations.CreateModel(
            name='StoreItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('item_type', models.CharField(choices=[('cosmetic', 'Cosmético'), ('avatar', 'Avatar'), ('theme', 'Tema'), ('boost', 'Impulso'), ('premium', 'Premium'), ('lives', 'Vidas'), ('streak_freeze', 'Congelamento de Streak'), ('double_xp', 'XP Duplo')], max_length=20)),
                ('coin_price', models.PositiveIntegerField(blank=True, null=True)),
                ('gem_price', models.PositiveIntegerField(blank=True, null=True)),
                ('real_price', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='store/items/')),
                ('preview_image', models.ImageField(blank=True, null=True, upload_to='store/previews/')),
                ('item_data', models.JSONField(default=dict)),
                ('duration_hours', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_limited', models.BooleanField(default=False)),
                ('stock_quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('available_from', models.DateTimeField(blank=True, null=True)),
                ('available_until', models.DateTimeField(blank=True, null=True)),
                ('purchase_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Item da Loja',
                'verbose_name_plural': 'Itens da Loja',
                'ordering': ['item_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserPurchase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('payment_method', models.CharField(choices=[('coins', 'Moedas'), ('gems', 'Gemas'), ('credit_card', 'Cartão de Crédito'), ('pix', 'PIX'), ('boleto', 'Boleto')], max_length=20)),
                ('coins_spent', models.PositiveIntegerField(default=0)),
                ('gems_spent', models.PositiveIntegerField(default=0)),
                ('real_amount', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('completed', 'Concluído'), ('failed', 'Falhou'), ('refunded', 'Estornado')], default='pending', max_length=20)),
                ('external_transaction_id', models.CharField(blank=True, max_length=200)),
                ('payment_data', models.JSONField(default=dict)),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to='gamification.storeitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Compra',
                'verbose_name_plural': 'Compras',
                'ordering': ['-purchased_at'],
            },
        ),
        migrations.CreateModel(
            name='UserBoost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('boost_type', models.CharField(choices=[('double_xp', 'XP Duplo'), ('double_coins', 'Moedas Duplas'), ('streak_freeze', 'Congelamento de Streak'), ('unlimited_lives', 'Vidas Infinitas'), ('skip_cooldown', 'Pular Cooldown')], max_length=20)),
                ('activated_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('duration_hours', models.PositiveIntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('purchase', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.userpurchase')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='active_boosts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Impulso do Usuário',
                'verbose_name_plural': 'Impulsos dos Usuários',
                'ordering': ['-activated_at'],
            },
        ),
        migrations.CreateModel(
            name='UserDailyChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.PositiveIntegerField(default=0)),
                ('target', models.PositiveIntegerField()),
                ('completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('xp_earned', models.PositiveIntegerField(default=0)),
                ('coins_earned', models.PositiveIntegerField(default=0)),
                ('gems_earned', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='gamification.dailychallenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Desafio Diário do Usuário',
                'verbose_name_plural': 'Desafios Diários dos Usuários',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'challenge')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('progress_when_unlocked', models.JSONField(default=dict)),
                ('xp_received', models.PositiveIntegerField(default=0)),
                ('coins_received', models.PositiveIntegerField(default=0)),
                ('gems_received', models.PositiveIntegerField(default=0)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlocked_by', to='gamification.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Conquista do Usuário',
                'verbose_name_plural': 'Conquistas dos Usuários',
                'ordering': ['-unlocked_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField()),
                ('score', models.FloatField()),
                ('previous_position', models.PositiveIntegerField(blank=True, null=True)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='gamification.leaderboard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Entrada do Ranking',
                'verbose_name_plural': 'Entradas dos Rankings',
                'ordering': ['leaderboard', 'position'],
                'unique_together': {('leaderboard', 'user', 'period_start')},
            },
        ),
    ]
