{"ast":null,"code":"import axios from 'axios';\n// Configuração base da API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5050/api/v1';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.api = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Interceptor para adicionar token de autenticação\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Interceptor para lidar com refresh token\n    this.api.interceptors.response.use(response => response, async error => {\n      var _error$response;\n      const originalRequest = error.config;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n          const refreshToken = localStorage.getItem('refresh_token');\n          if (refreshToken) {\n            const response = await axios.post(`${API_BASE_URL}/auth/token/refresh/`, {\n              refresh: refreshToken\n            });\n            const {\n              access\n            } = response.data;\n            localStorage.setItem('access_token', access);\n            return this.api(originalRequest);\n          }\n        } catch (refreshError) {\n          // Refresh token inválido, fazer logout\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          window.location.href = '/login';\n        }\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Métodos de autenticação\n  async login(credentials) {\n    const response = await this.api.post('/auth/login/', credentials);\n    return response.data;\n  }\n  async register(userData) {\n    const response = await this.api.post('/auth/register/', userData);\n    return response.data;\n  }\n  async refreshToken(refreshToken) {\n    const response = await this.api.post('/auth/token/refresh/', {\n      refresh: refreshToken\n    });\n    return response.data;\n  }\n  async logout() {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (refreshToken) {\n      await this.api.post('/auth/logout/', {\n        refresh: refreshToken\n      });\n    }\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n  async getCurrentUser() {\n    const response = await this.api.get('/auth/user/');\n    return response.data;\n  }\n  async updateProfile(profileData) {\n    const response = await this.api.patch('/auth/profile/', profileData);\n    return response.data;\n  }\n\n  // Métodos de cursos\n  async getSubjects() {\n    const response = await this.api.get('/courses/subjects/');\n    return response.data.results;\n  }\n  async getSubject(id) {\n    const response = await this.api.get(`/courses/subjects/${id}/`);\n    return response.data;\n  }\n  async getTopicsBySubject(subjectId) {\n    const response = await this.api.get(`/courses/topics/?subject=${subjectId}`);\n    return response.data.results;\n  }\n  async getLessonsByTopic(topicId) {\n    const response = await this.api.get(`/courses/lessons/?topic=${topicId}`);\n    return response.data.results;\n  }\n  async getLesson(id) {\n    const response = await this.api.get(`/courses/lessons/${id}/`);\n    return response.data;\n  }\n  async markLessonAsCompleted(lessonId) {\n    await this.api.post(`/courses/lessons/${lessonId}/complete/`);\n  }\n  async getUserProgress(subjectId) {\n    const url = subjectId ? `/courses/subjects/${subjectId}/progress/` : '/courses/progress/';\n    const response = await this.api.get(url);\n    return response.data;\n  }\n\n  // Métodos de questões\n  async getQuestions(params) {\n    const response = await this.api.get('/questions/questions/', {\n      params\n    });\n    return response.data;\n  }\n  async getQuestion(id) {\n    const response = await this.api.get(`/questions/questions/${id}/`);\n    return response.data;\n  }\n  async answerQuestion(questionId, selectedOptionId) {\n    const response = await this.api.post(`/questions/questions/${questionId}/answer/`, {\n      selected_option: selectedOptionId\n    });\n    return response.data;\n  }\n  async createQuiz(quizData) {\n    const response = await this.api.post('/questions/quizzes/', quizData);\n    return response.data;\n  }\n  async getQuizzes() {\n    const response = await this.api.get('/questions/quizzes/');\n    return response.data;\n  }\n  async startQuiz(quizId) {\n    const response = await this.api.post(`/questions/quizzes/${quizId}/start/`);\n    return response.data;\n  }\n  async getQuestionStats() {\n    const response = await this.api.get('/questions/questions/stats/');\n    return response.data;\n  }\n\n  // Métodos de gamificação\n  async getAchievements() {\n    const response = await this.api.get('/gamification/achievements/');\n    return response.data.results;\n  }\n  async getUserAchievements() {\n    const response = await this.api.get('/gamification/achievements/user_achievements/');\n    return response.data;\n  }\n  async getLeaderboards() {\n    const response = await this.api.get('/gamification/leaderboards/');\n    return response.data.results;\n  }\n  async getLeaderboard(id) {\n    const response = await this.api.get(`/gamification/leaderboards/${id}/`);\n    return response.data;\n  }\n  async getStoreItems() {\n    const response = await this.api.get('/gamification/store-items/');\n    return response.data.results;\n  }\n  async purchaseItem(itemId, quantity = 1) {\n    const response = await this.api.post(`/gamification/store-items/${itemId}/purchase/`, {\n      quantity\n    });\n    return response.data;\n  }\n  async getDailyChallenges() {\n    const response = await this.api.get('/gamification/daily-challenges/');\n    return response.data.results;\n  }\n  async getUserStats() {\n    const response = await this.api.get('/gamification/stats/');\n    return response.data;\n  }\n\n  // Métodos de IA\n  async getAIExplanation(questionId) {\n    const response = await this.api.post('/ai/feedback/request_explanation/', {\n      question_id: questionId\n    });\n    return response.data;\n  }\n  async getStudyRecommendations() {\n    const response = await this.api.get('/ai/recommendations/');\n    return response.data;\n  }\n  async generatePersonalizedQuiz(preferences) {\n    const response = await this.api.post('/ai/recommendations/generate_recommendations/', preferences);\n    return response.data;\n  }\n  async getLearningAnalytics() {\n    const response = await this.api.get('/ai/analytics/learning_analytics/');\n    return response.data;\n  }\n\n  // Métodos utilitários\n  async uploadFile(file, endpoint) {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await this.api.post(endpoint, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n\n  // Configuração de token\n  setAuthToken(token) {\n    localStorage.setItem('access_token', token);\n  }\n  removeAuthToken() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('access_token');\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","post","refresh","access","data","setItem","refreshError","removeItem","window","location","href","login","credentials","register","userData","logout","getCurrentUser","get","updateProfile","profileData","patch","getSubjects","results","getSubject","id","getTopicsBySubject","subjectId","getLessonsByTopic","topicId","getLesson","markLessonAsCompleted","lessonId","getUserProgress","url","getQuestions","params","getQuestion","answerQuestion","questionId","selectedOptionId","selected_option","createQuiz","quizData","getQuizzes","startQuiz","quizId","getQuestionStats","getAchievements","getUserAchievements","getLeaderboards","getLeaderboard","getStoreItems","purchaseItem","itemId","quantity","getDailyChallenges","getUserStats","getAIExplanation","question_id","getStudyRecommendations","generatePersonalizedQuiz","preferences","getLearningAnalytics","uploadFile","file","endpoint","formData","FormData","append","setAuthToken","removeAuthToken","isAuthenticated","apiService"],"sources":["/Users/mdearaujo/Downloads/concurseiro/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { \n  AuthResponse, \n  LoginRequest, \n  RegisterRequest, \n  User, \n  UserProfile,\n  Subject,\n  Topic,\n  Lesson,\n  Question,\n  Quiz,\n  Achievement,\n  Leaderboard,\n  StoreItem,\n  DailyChallenge,\n  PaginatedResponse \n} from '../types';\n\n// Configuração base da API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5050/api/v1';\n\nclass ApiService {\n  private api: AxiosInstance;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Interceptor para adicionar token de autenticação\n    this.api.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('access_token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => {\n        return Promise.reject(error);\n      }\n    );\n\n    // Interceptor para lidar com refresh token\n    this.api.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const originalRequest = error.config;\n\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n\n          try {\n            const refreshToken = localStorage.getItem('refresh_token');\n            if (refreshToken) {\n              const response = await axios.post(`${API_BASE_URL}/auth/token/refresh/`, {\n                refresh: refreshToken,\n              });\n\n              const { access } = response.data;\n              localStorage.setItem('access_token', access);\n\n              return this.api(originalRequest);\n            }\n          } catch (refreshError) {\n            // Refresh token inválido, fazer logout\n            localStorage.removeItem('access_token');\n            localStorage.removeItem('refresh_token');\n            window.location.href = '/login';\n          }\n        }\n\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Métodos de autenticação\n  async login(credentials: LoginRequest): Promise<AuthResponse> {\n    const response = await this.api.post<AuthResponse>('/auth/login/', credentials);\n    return response.data;\n  }\n\n  async register(userData: RegisterRequest): Promise<AuthResponse> {\n    const response = await this.api.post<AuthResponse>('/auth/register/', userData);\n    return response.data;\n  }\n\n  async refreshToken(refreshToken: string): Promise<{ access: string }> {\n    const response = await this.api.post('/auth/token/refresh/', {\n      refresh: refreshToken,\n    });\n    return response.data;\n  }\n\n  async logout(): Promise<void> {\n    const refreshToken = localStorage.getItem('refresh_token');\n    if (refreshToken) {\n      await this.api.post('/auth/logout/', { refresh: refreshToken });\n    }\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n\n  async getCurrentUser(): Promise<User> {\n    const response = await this.api.get<User>('/auth/user/');\n    return response.data;\n  }\n\n  async updateProfile(profileData: Partial<UserProfile>): Promise<UserProfile> {\n    const response = await this.api.patch<UserProfile>('/auth/profile/', profileData);\n    return response.data;\n  }\n\n  // Métodos de cursos\n  async getSubjects(): Promise<Subject[]> {\n    const response = await this.api.get<PaginatedResponse<Subject>>('/courses/subjects/');\n    return response.data.results;\n  }\n\n  async getSubject(id: number): Promise<Subject> {\n    const response = await this.api.get<Subject>(`/courses/subjects/${id}/`);\n    return response.data;\n  }\n\n  async getTopicsBySubject(subjectId: number): Promise<Topic[]> {\n    const response = await this.api.get<PaginatedResponse<Topic>>(`/courses/topics/?subject=${subjectId}`);\n    return response.data.results;\n  }\n\n  async getLessonsByTopic(topicId: number): Promise<Lesson[]> {\n    const response = await this.api.get<PaginatedResponse<Lesson>>(`/courses/lessons/?topic=${topicId}`);\n    return response.data.results;\n  }\n\n  async getLesson(id: number): Promise<Lesson> {\n    const response = await this.api.get<Lesson>(`/courses/lessons/${id}/`);\n    return response.data;\n  }\n\n  async markLessonAsCompleted(lessonId: number): Promise<void> {\n    await this.api.post(`/courses/lessons/${lessonId}/complete/`);\n  }\n\n  async getUserProgress(subjectId?: number): Promise<any> {\n    const url = subjectId ? `/courses/subjects/${subjectId}/progress/` : '/courses/progress/';\n    const response = await this.api.get(url);\n    return response.data;\n  }\n\n  // Métodos de questões\n  async getQuestions(params?: {\n    subject?: number;\n    topic?: number;\n    difficulty?: number;\n    exam_board?: number;\n    page?: number;\n  }): Promise<PaginatedResponse<Question>> {\n    const response = await this.api.get<PaginatedResponse<Question>>('/questions/questions/', {\n      params,\n    });\n    return response.data;\n  }\n\n  async getQuestion(id: number): Promise<Question> {\n    const response = await this.api.get<Question>(`/questions/questions/${id}/`);\n    return response.data;\n  }\n\n  async answerQuestion(questionId: number, selectedOptionId: number): Promise<any> {\n    const response = await this.api.post(`/questions/questions/${questionId}/answer/`, {\n      selected_option: selectedOptionId,\n    });\n    return response.data;\n  }\n\n  async createQuiz(quizData: {\n    title: string;\n    description: string;\n    questions: number[];\n    time_limit: number;\n    difficulty_level: number;\n    is_public: boolean;\n  }): Promise<Quiz> {\n    const response = await this.api.post<Quiz>('/questions/quizzes/', quizData);\n    return response.data;\n  }\n\n  async getQuizzes(): Promise<PaginatedResponse<Quiz>> {\n    const response = await this.api.get<PaginatedResponse<Quiz>>('/questions/quizzes/');\n    return response.data;\n  }\n\n  async startQuiz(quizId: number): Promise<any> {\n    const response = await this.api.post(`/questions/quizzes/${quizId}/start/`);\n    return response.data;\n  }\n\n  async getQuestionStats(): Promise<any> {\n    const response = await this.api.get('/questions/questions/stats/');\n    return response.data;\n  }\n\n  // Métodos de gamificação\n  async getAchievements(): Promise<Achievement[]> {\n    const response = await this.api.get<PaginatedResponse<Achievement>>('/gamification/achievements/');\n    return response.data.results;\n  }\n\n  async getUserAchievements(): Promise<any[]> {\n    const response = await this.api.get('/gamification/achievements/user_achievements/');\n    return response.data;\n  }\n\n  async getLeaderboards(): Promise<Leaderboard[]> {\n    const response = await this.api.get<PaginatedResponse<Leaderboard>>('/gamification/leaderboards/');\n    return response.data.results;\n  }\n\n  async getLeaderboard(id: number): Promise<Leaderboard> {\n    const response = await this.api.get<Leaderboard>(`/gamification/leaderboards/${id}/`);\n    return response.data;\n  }\n\n  async getStoreItems(): Promise<StoreItem[]> {\n    const response = await this.api.get<PaginatedResponse<StoreItem>>('/gamification/store-items/');\n    return response.data.results;\n  }\n\n  async purchaseItem(itemId: number, quantity: number = 1): Promise<any> {\n    const response = await this.api.post(`/gamification/store-items/${itemId}/purchase/`, {\n      quantity,\n    });\n    return response.data;\n  }\n\n  async getDailyChallenges(): Promise<DailyChallenge[]> {\n    const response = await this.api.get<PaginatedResponse<DailyChallenge>>('/gamification/daily-challenges/');\n    return response.data.results;\n  }\n\n  async getUserStats(): Promise<any> {\n    const response = await this.api.get('/gamification/stats/');\n    return response.data;\n  }\n\n  // Métodos de IA\n  async getAIExplanation(questionId: number): Promise<any> {\n    const response = await this.api.post('/ai/feedback/request_explanation/', {\n      question_id: questionId,\n    });\n    return response.data;\n  }\n\n  async getStudyRecommendations(): Promise<any> {\n    const response = await this.api.get('/ai/recommendations/');\n    return response.data;\n  }\n\n  async generatePersonalizedQuiz(preferences: any): Promise<any> {\n    const response = await this.api.post('/ai/recommendations/generate_recommendations/', preferences);\n    return response.data;\n  }\n\n  async getLearningAnalytics(): Promise<any> {\n    const response = await this.api.get('/ai/analytics/learning_analytics/');\n    return response.data;\n  }\n\n  // Métodos utilitários\n  async uploadFile(file: File, endpoint: string): Promise<any> {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await this.api.post(endpoint, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n\n  // Configuração de token\n  setAuthToken(token: string): void {\n    localStorage.setItem('access_token', token);\n  }\n\n  removeAuthToken(): void {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('access_token');\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}